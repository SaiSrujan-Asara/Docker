🚢 Docker Image Import (docker image import)

1️⃣ What is docker image import?

i) docker image import is a Docker CLI command used to create a Docker image from a tarball or standard input.

ii) Unlike docker build, which builds an image from a Dockerfile, docker import creates an image from a filesystem archive (e.g., exported container filesystem or any tar archive).

iii) Typically used to create images from filesystem snapshots or backups.

***IMPORTANT NOTE***

"According to the official Docker documentation, the docker image import command can import the contents from a tarball to create a filesystem image. The tarball can be an archive (.tar, .tar.gz, .tgz, .bzip, .tar.xz, or .txz) containing a filesystem or an individual file on the Docker host. If you specify an archive, Docker untars it in the container relative to the / (root). If you specify an individual file, you must specify the full path within the host. 
Docker Documentation

This means that Docker doesn't require the tarball to be exported from a container. It can be any tarball that represents a valid Linux root filesystem."

---

2️⃣ Syntax and Basic Usage

docker image import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]

i) file|URL|-

A tarball file or URL to import from

- means reading the archive from STDIN (e.g., piping input)

ii) REPOSITORY[:TAG]

Optional name and tag for the new image

---
3️⃣ What does docker image import do?

i) It imports the contents of a tarball (containing a filesystem snapshot) and turns it into a Docker image.

ii) The resulting image contains the files inside the tarball as its root filesystem.

iii) You can then run containers from this image.

---
4️⃣ Examples

-------------

Example 1: Import from local tarball

--------------

🐳 Run a new container interactively (-it) from the alpine image.
🏷️ Named c1. Runs /bin/sh.
🧠 This creates a writable layer on top of the read-only Alpine image.

~ ➜  docker container run -it \
> --name c1 \
> alpine sh

📝 Creates a file inside the container's root (/) called rich.txt
💾 File is stored in the container's UpperDir (writable layer)

/ # echo "you will become rich" > /rich.txt

📁 You can see /rich.txt was successfully created
This now exists only inside the container's layer

/ # ls
bin       etc       lib       mnt       proc      root      sbin      sys       usr
dev       home      media     opt       rich.txt  run       srv       tmp       var

❌ Exit the container — it stops but its filesystem persists

/ # exit


🔍 Shows running containers
💡 Output is empty — container c1 is stopped

~ ➜  docker ps

📦 docker ps -a lists all containers, including exited ones
✅ Confirms c1 was created from alpine, exited cleanly (0)

~ ➜  docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS                     PORTS     NAMES
ba5c905830ae   alpine    "sh"      57 seconds ago   Exited (0) 9 seconds ago   c1


📤 Exports the full container filesystem as a tar archive
🧱 This flattens all layers into one — no image metadata, history, or config

~ ➜  docker export c1 --output c1_fs.tar


📂 The tar file c1_fs.tar appears — contains the root FS of c1, including /rich.txt

~ ➜  ls
c1_fs.tar


🔁 Imports the exported FS as a new Docker image
🏷️ Tagged c1:latest
✅ Now rich.txt is part of the base image

~ ➜  docker image import c1_fs.tar c1:latest
sha256:a44e727bd8f0426cd4b14a2686c7a9c3418e47d2ac0ff7fc64e4aca34905a542


📸 You now have two images:

🧊 alpine:latest → original base image

🔥 c1:latest → new image that includes /rich.txt

~ ➜  docker images
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
c1           latest    a44e727bd8f0   5 seconds ago   8.32MB
alpine       latest    706db57fb206   2 weeks ago     8.32MB


-----------------------
Example 2: Import from STDIN
-----------------------

🔧 Run this command:

cat mytestcontainer_fs.tar | docker image import - myimportedimage:from-stdin

🔍 What’s happening here:

cat mytestcontainer_fs.tar → reads the tarball content

| → pipes the content to the next command

docker image import - ... → the - tells Docker to read from standard input (STDIN)

myimportedimage:from-stdin → your new image name and tag


---
🚦 Direct File Import vs STDIN Import

| Criteria                   | Direct File Import                         | STDIN Import                                      |                                  |
| -------------------------- | ------------------------------------------ | ------------------------------------------------- | -------------------------------- |
| **Command Syntax**         | `docker image import file.tar imagename`   | `cat file.tar                                     | docker image import - imagename` |
| **Simplicity**             | Simpler, straightforward                   | Slightly more complex (pipes required)            |                                  |
| **Disk Usage**             | Requires the file to exist on disk         | Can avoid intermediate file if streaming          |                                  |
| **Automation / Scripting** | Can be scripted, but files must be present | More flexible for streaming and chaining commands |                                  |
| **Remote Workflows**       | Needs file transfer (e.g., scp)            | Can pipe directly over SSH or network streams     |                                  |
| **Error Debugging**        | Easier to re-run with file                 | May be harder to debug pipe errors                |                                  |
| **Speed**                  | Depends on disk I/O                        | Can be faster in streaming workflows              |                                  |
| **Use with Compression**   | Needs manual decompression before import   | Can decompress and pipe directly                  |                                  |
| **Security**               | File exists on disk, can be scanned        | Data flows directly, ephemeral                    |                                  |

---
🔍 When to use Direct File Import
---

i) You have the tarball locally available.

ii) You want to keep archives for backup or audit.

iii) You prefer explicit file-based commands.

iv) You want easier debugging and retries.

v) You don’t need to stream or automate across machines.

---
🔍 When to use STDIN Import
---

i) You want to avoid storing the tarball on disk.

ii) You want to stream data from one process to another (e.g., docker export → import).

iii) You are working in CI/CD pipelines or automated scripts.

iv) You want to combine decompression or other processing inline.

v) You want to transfer directly between hosts over SSH or network.

---

No intermediate files anywhere! Direct stream from export → compress → send over SSH → decompress → import.

docker export mycontainer | gzip | ssh user@remotehost 'gunzip | docker image import - newimage:latest'

---------------------
Example-3 Import from External URl
---------------------

i) Docker streams the tarball directly from the URL into the import process.

ii) It does not save the tarball on disk permanently.

iii) The tarball is stored temporarily in memory or a temp folder managed internally by Docker, and then deleted immediately after the import finishes.

---
docker image import https://partner-images.canonical.com/core/focal/current/ubuntu-focal-core-cloudimg-amd64-root.tar.gz ubuntu:focal-core

Downloading from https://partner-images.canonical.com/core/focal/current/ubuntu-focal-core-cloudimg-amd64-root.tar.gz
sha256:03b4086f585adee151dab233e0b655355070e219bc8767f0b3a89186aeb50bb4B/27.77MB

´ ➜  docker images                                                                                                                             
REPOSITORY   TAG          IMAGE ID       CREATED          SIZE
ubuntu       focal-core   03b4086f585a   16 seconds ago   72.8MB
img          v1           33ced75b5f21   15 minutes ago   8.32MB
c1           latest       a44e727bd8f0   34 minutes ago   8.32MB
alpine       latest       706db57fb206   2 weeks ago      8.32MB

---










| Method               | Syntax Example                                               | Use Case                         |
| -------------------- | ------------------------------------------------------------ | -------------------------------- |
| 🗃️ Local File       | `docker image import file.tar myimage`                       | Most common; import from archive |
| 📥 STDIN             | `cat file.tar \| docker image import - myimage`              | Scripting, piping from files     |
| 🌐 Remote URL        | `docker image import https://site.com/fs.tar myimage`        | Import image data from web       |
| 🗜️ Compressed Input | `gunzip -c file.tar.gz \| docker image import - myimage`     | Use compressed archive directly  |
| 🔁 Export → Import   | `docker export mycontainer \| docker image import - myimage` | Turn a container into an image   |
