üß± 1Ô∏è‚É£ What is a Docker Registry?

A Docker Registry is a storage and distribution system for Docker images.

It‚Äôs like a Git server, but for container images.

You use it to push and pull images:

Push ‚Üí upload local images to a registry.

Pull ‚Üí download images from a registry.

---
üì¶ Analogy:

| Concept         | Git                   | Docker                                       |
| --------------- | --------------------- | -------------------------------------------- |
| Hosting Service | GitHub                | Docker Hub / AWS ECR / GCR / GitLab Registry |
| Repository      | Git repository (code) | Docker repository (images)                   |
| Commit          | Commit SHA            | Image digest (sha256 hash)                   |


---
‚öôÔ∏è 2Ô∏è‚É£ What is a Docker Repository?

A repository is a collection of related Docker images, typically the same app but with different tags (versions).

üìò Example:

Repository name:

nginx


Contains multiple images (tags):

nginx:latest
nginx:1.25
nginx:1.24


Each tag points to a specific version of the image ‚Äî similar to Git branches or releases.

---
üß© Registry vs Repository ‚Äî The Core Difference

| Concept     | Docker Registry                               | Docker Repository                              |
| ----------- | --------------------------------------------- | ---------------------------------------------- |
| Definition  | Central service that stores and serves images | A named collection of images inside a registry |
| Example     | Docker Hub, AWS ECR, GCR                      | `nginx`, `myapp/backend`, `python`             |
| URL Example | `https://index.docker.io/v1/`                 | `docker.io/library/nginx`                      |
| Role        | Entire image server                           | Individual image collection                    |
| Analogy     | GitHub                                        | Individual Git repo                            |
| Hierarchy   | Registry ‚Üí Namespace ‚Üí Repository ‚Üí Tags      |                                                |

---
üß≠ 3Ô∏è‚É£ Registry Hierarchy Structure

A Docker image name usually looks like this:

[REGISTRY_HOST]/[NAMESPACE]/[REPOSITORY]:[TAG]

| Part              | Example                        | Description                              |
| ----------------- | ------------------------------ | ---------------------------------------- |
| **REGISTRY_HOST** | `docker.io`                    | Registry domain (optional if Docker Hub) |
| **NAMESPACE**     | `library`, `myorg`, `user123`  | User or organization namespace           |
| **REPOSITORY**    | `nginx`, `backend`, `frontend` | Application name                         |
| **TAG**           | `latest`, `v1.0`, `test`       | Version label                            |

---
üß© Example Breakdown

Example 1

docker.io/library/nginx:latest

| Part       | Meaning                               |
| ---------- | ------------------------------------- |
| Registry   | Docker Hub                            |
| Namespace  | library (default for official images) |
| Repository | nginx                                 |
| Tag        | latest                                |

üß∞ 4Ô∏è‚É£ Common Public & Private Registries

| Registry                      | Description                          | URL                                        | Authentication    |
| ----------------------------- | ------------------------------------ | ------------------------------------------ | ----------------- |
| **Docker Hub**                | Default public registry              | `docker.io`                                | Optional          |
| **AWS ECR**                   | Amazon Elastic Container Registry    | `<account>.dkr.ecr.<region>.amazonaws.com` | AWS CLI / IAM     |
| **GCR / GAR**                 | Google Container / Artifact Registry | `gcr.io` / `us-docker.pkg.dev`             | gcloud auth       |
| **GitHub Container Registry** | Integrated with GitHub Packages      | `ghcr.io`                                  | GitHub token      |
| **GitLab Registry**           | Built into GitLab CI/CD              | `registry.gitlab.com`                      | GitLab token      |
| **Harbor**                    | Open-source enterprise registry      | Self-hosted                                | User-defined      |
| **Quay.io**                   | RedHat-hosted registry               | `quay.io`                                  | OAuth / API token |

üß© 1Ô∏è‚É£ Understanding Docker Image Hierarchy (Big Picture)

REGISTRY ‚Üí NAMESPACE ‚Üí REPOSITORY ‚Üí TAG

| Level          | Example                                                              | Description                                                        |
| -------------- | -------------------------------------------------------------------- | ------------------------------------------------------------------ |
| **Registry**   | `docker.io`, `ghcr.io`, `1234567890.dkr.ecr.us-east-1.amazonaws.com` | The **server** that stores and distributes images                  |
| **Namespace**  | `library`, `myorg`, `team1`, `devops`                                | Logical grouping of repositories (like a ‚Äúuser‚Äù or ‚Äúorganization‚Äù) |
| **Repository** | `nginx`, `backend`, `frontend`, `myapp`                              | Collection of image versions (tags)                                |
| **Tag**        | `v1`, `latest`, `prod`                                               | Specific version/build of the image                                |

üß± 2Ô∏è‚É£ What is a Namespace?

A namespace is a logical grouping or owner name under which repositories exist.

Think of it like a folder or organization account that contains one or more repositories.

---
üß© Example 1 ‚Äî Public Images (Docker Hub)

docker.io/library/nginx:latest

| Field      | Meaning                               |
| ---------- | ------------------------------------- |
| Registry   | docker.io (Docker Hub)                |
| Namespace  | library (default for official images) |
| Repository | nginx                                 |
| Tag        | latest                                |

üëâ library is an implicit namespace used by Docker for official images (like nginx, redis, ubuntu).

So when you do:

docker pull nginx

Docker automatically resolves it to:

docker.io/library/nginx:latest

---
üß© Example 2 ‚Äî User Namespace (Docker Hub)

If your Docker Hub username is john, and you push:

docker push john/myapp:v1

| Field      | Meaning   |
| ---------- | --------- |
| Registry   | docker.io |
| Namespace  | john      |
| Repository | myapp     |
| Tag        | v1        |

‚úÖ Here, john is the namespace, representing your account or organization on Docker Hub.

---
üß© Example 3 ‚Äî Organization Namespace (GitHub Container Registry)

ghcr.io/devops-team/backend:v2

| Field      | Meaning     |
| ---------- | ----------- |
| Registry   | ghcr.io     |
| Namespace  | devops-team |
| Repository | backend     |
| Tag        | v2          |

Here, devops-team is your GitHub org or username ‚Äî the namespace.

-----------------
üß© 3Ô∏è‚É£ What is a Repository?

A repository is a collection of images (each with a unique tag) under a namespace.

All versions of an image belong to the same repository.

Repositories are like versioned artifacts of one application.

---
üß© Example

Repository:

myorg/webapp

Images (tags) under it:

myorg/webapp:latest
myorg/webapp:v1
myorg/webapp:v1.1
myorg/webapp:prod

Each tag points to a different build (or digest) of that same application image.

---
üß† 4Ô∏è‚É£ Namespace vs Repository ‚Äî Key Difference

| Aspect            | Namespace                         | Repository                                   |
| ----------------- | --------------------------------- | -------------------------------------------- |
| Meaning           | Logical grouping (user/org)       | Specific image collection                    |
| Scope             | Can contain multiple repositories | Contains multiple image versions (tags)      |
| Example           | `myorg`                           | `myorg/backend`                              |
| Relationship      | Parent                            | Child                                        |
| Analogy           | GitHub organization/user          | Individual Git repository                    |
| Example Structure | `docker.io/myorg/backend:latest`  | `backend` repository under `myorg` namespace |


---
6Ô∏è‚É£ When Registry is Hosted ‚Äî Typical Field Pattern

When you‚Äôre hosting your own Docker Registry (v2) or using an enterprise one (like Harbor), images are stored using a consistent path pattern:

| Field           | Example                         | Description                             |
| --------------- | ------------------------------- | --------------------------------------- |
| Registry Host   | `registry.company.com`          | Your registry server (hostname or FQDN) |
| Port (optional) | `:5000`                         | Port if not standard (443/80)           |
| Namespace       | `devops`, `staging`, `frontend` | Project or user namespace               |
| Repository      | `web`, `api`, `nginx`           | Application repo                        |
| Tag             | `v1`, `latest`, `prod`          | Version                                 |
