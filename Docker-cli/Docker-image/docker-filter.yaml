🔹 1. What Is --filter in Docker?

The --filter flag (short form: -f) is used to filter output of Docker commands based on specific criteria.

🧠 Think of it like:

Instead of listing all containers or images, we can show only those matching certain properties (e.g., by name, status, label, ID, etc.).

It’s similar in concept to filtering data with SQL’s WHERE clause or using grep in Linux.

The docker filter concept is not an independent Docker CLI command, but rather an option/flag used with many Docker commands (like docker ps, docker images, docker network ls, docker volume ls, etc.) to filter and refine results.

So, when you say “docker filter command”, what you actually mean is using the --filter (or -f) flag in Docker commands.

---
🔹 2. Syntax

docker <command> --filter <key>=<value>

Or multiple filters:

docker <command> --filter <key1>=<value1> --filter <key2>=<value2>

---
🔹 3. Commands That Support --filter

| Command               | Description                       |
| --------------------- | --------------------------------- |
| `docker ps`           | Filter running/stopped containers |
| `docker images`       | Filter images                     |
| `docker network ls`   | Filter Docker networks            |
| `docker volume ls`    | Filter Docker volumes             |
| `docker node ls`      | (Swarm mode) Filter swarm nodes   |
| `docker service ls`   | (Swarm mode) Filter services      |
| `docker system prune` | Filter system prune targets       |

---
🔹 4. Similar Command / Concept

grep — Used after listing results to filter text manually.

Example:

docker ps | grep nginx


❌ This is less efficient — Docker still lists all containers first.
✅ --filter is more efficient — filtering happens inside Docker before output.

---
🔹 5. Example: Real-world Scenario 

You have hundreds of containers running across environments with labels like:

i) env=prod

ii) env=staging

iii) app=frontend

iv) app=backend

You only want to stop all “frontend” containers in “staging” environment.

docker stop $(docker ps -q --filter "label=env=staging" --filter "label=app=frontend")

Here:

docker ps -q → returns only container IDs

--filter → selects only matching containers

docker stop → stops those containers

That’s clean, precise, and automation-friendly.

---
🔹 6. Interview Tip 💡

Q: What’s the difference between docker ps | grep and docker ps --filter?

✅ Answer:

grep filters text after Docker outputs everything.

--filter instructs Docker to only return matching results internally.
This makes it faster, more reliable, and script-friendly.

---
🧩 Part (i): Why --filter is More Efficient and Powerful than grep

🔹 1️⃣ Efficiency Difference (Internal vs External Filtering)

| Method     | Where Filtering Happens    | Example                              | Efficiency                                                       |                                                      |
| ---------- | -------------------------- | ------------------------------------ | ---------------------------------------------------------------- | ---------------------------------------------------- |
| `--filter` | Inside Docker Engine       | `docker ps --filter "status=exited"` | ✅ Fast (Docker daemon filters internally before sending results) |                                                      |
| `grep`     | After output on your shell | `docker ps                           | grep exited`                                                     | ❌ Slow (Docker lists *all*, then shell filters text) |


🧠 Internal Working:

--filter → instructs the Docker daemon (server) to query its internal metadata store (containers, labels, IDs, etc.) and return only matching objects.

grep → Docker CLI asks the daemon for all objects, receives everything, prints them to stdout, and then your shell applies text-based filtering.

So --filter:
✅ Reduces data transferred between Docker client & daemon.
✅ Faster on large systems with many containers/images.
✅ More accurate — works on metadata, not string text.

---
🧱 Supported Filters for docker images

✅ Note: Filters are combined using logical AND, not OR.
That means all conditions must be true for an image to appear.

| Filter Key    | Description                                    | Possible Values                            | Example                        |
| ------------- | ---------------------------------------------- | ------------------------------------------ | ------------------------------ |
| **dangling**  | Filter images that are not tagged or used      | `true`, `false`                            | `--filter dangling=true`       |
| **label**     | Filter images by label                         | `<key>`, `<key>=<value>`, `<key>!=<value>` | `--filter label=env=prod`      |
| **before**    | Filter images created **before** another image | `<image-name>` or `<image-id>`             | `--filter before=ubuntu:20.04` |
| **since**     | Filter images created **after** another image  | `<image-name>` or `<image-id>`             | `--filter since=nginx:1.25`    |
| **reference** | Filter by image name/tag pattern               | `<name>[:tag]` or wildcard                 | `--filter reference='nginx*'`  |

---
🔹 1. dangling Filter
---

💡 What It Means

“Dangling” images are untagged images that usually appear after a rebuild or re-tag — their repository and tag are shown as <none>.

They are often intermediate build layers or old images that can be cleaned up.

🔑 Syntax
---
docker images --filter dangling=[true|false]

🧩 Examples
---
List only dangling (unused) images

docker images --filter dangling=true

List only non-dangling images

docker images --filter dangling=false

🧠 Use Case

Before cleaning up disk space safely:

docker images --filter dangling=true -q | xargs docker rmi

---
🔹 2. label Filter
---

💡 What It Means

Labels are key-value metadata attached to Docker images.

You can assign labels during build time using:

LABEL maintainer="john@example.com"

LABEL env="production"

Then filter them easily.

---
🔑 Syntax

docker images --filter "label=<key>"
docker images --filter "label=<key>=<value>"
docker images --filter "label=<key>!=<value>"

---
🧩 Examples

i) List images that have any label “env”

docker images --filter "label=env"

ii) List images with label env=production

docker images --filter "label=env=production"

iii)) Exclude images labeled as env=dev

docker images --filter "label=env!=dev"

iv) Combine label and dangling filters

docker images --filter "label=env=staging" --filter "dangling=false"

🧠 Use Case

You can mark images in CI/CD pipelines:

LABEL build_type=release
LABEL team=backend


And later deploy or clean based on that:

docker images --filter "label=build_type=release"

---
🔹 3. before Filter
---
💡 What It Means

Lists images created before a specific image (based on creation timestamp).

🔑 Syntax

docker images --filter before=<image-name-or-id>

🧩 Examples

i) Show images created before nginx:latest

docker images --filter before=nginx:latest

ii)) Show images created before an image ID

docker images --filter before=3b4173355427

🧠 Use Case

Useful for cleanup automation:

docker rmi $(docker images --filter before=myapp:latest -q)

This removes all images older than your latest build.

---
🔹 4. since Filter
---

💡 What It Means

Opposite of before — lists images created after a specified image.

🔑 Syntax

docker images --filter since=<image-name-or-id>

🧩 Examples

i) List images created after ubuntu:20.04

docker images --filter since=ubuntu:20.04

ii) List images created after a certain build

docker images --filter since=myapp:v1.0

🧠 Use Case

Helps identify recently built images:

docker images --filter since=myapp:v2.0

---
🔹 5. reference Filter
---

💡 What It Means

Filter images based on name and tag patterns.

Supports wildcards (*).

🔑 Syntax
docker images --filter reference=<pattern>

🧩 Examples

i) List images starting with “nginx”

docker images --filter reference='nginx*'

ii) List images from a specific repo and tag

docker images --filter reference='myrepo/backend:v*'

iii) List all “latest” tagged images

docker images --filter reference='*:latest'

iv) Combine with label filter

docker images --filter reference='nginx*' --filter "label=env=prod"

🧠 Use Case

When managing large registries with naming conventions:

docker images --filter reference='company/*:release*'

----
🧮 Combining Multiple Filters
----

You can use multiple --filter flags together.

Example 1:

List all non-dangling images labeled as production:

docker images --filter "dangling=false" --filter "label=env=production"

Example 2:

List all nginx images created after ubuntu:20.04:

docker images --filter "reference=nginx*" --filter "since=ubuntu:20.04"

Example 3:

List custom-built images older than a certain build, excluding dev labels:

docker images --filter "before=myapp:v3.0" --filter "label=env!=dev"

---
🧭 Real-World Use Cases

| Scenario                                       | Command                                                       | Purpose                   |
| ---------------------------------------------- | ------------------------------------------------------------- | ------------------------- |
| 🧹 Clean old builds                            | `docker rmi $(docker images --filter before=myapp:latest -q)` | Delete old images         |
| 🏷 Deploy only prod builds                     | `docker images --filter "label=env=prod"`                     | Deploy stable images      |
| 🧰 Find images created after a base OS upgrade | `docker images --filter since=ubuntu:22.04`                   | Identify dependent builds |
| 🔍 Find all backend release images             | `docker images --filter reference='backend:*'`                | CI/CD image management    |
| ⚙️ Cleanup dangling images                     | `docker images --filter dangling=true`                        | Free disk space safely    |

---
🧩 Best Practices

| Best Practice                        | Description                     | Example                                                          |
| ------------------------------------ | ------------------------------- | ---------------------------------------------------------------- |
| ✅ Always test filters before pruning | Avoid deleting important images | `docker images --filter ...` before `docker image prune`         |
| 🧾 Label all custom builds           | Easier to manage environments   | `LABEL env=prod`, then filter by label                           |
| ⚡ Use `reference` wildcard carefully | Avoid accidental matches        | `'myapp:v*'` not `'my*'`                                         |
| 🧹 Automate cleanup                  | Use filters in cleanup scripts  | `docker image prune --filter "until=24h" --filter "label!=keep"` |
| 🧠 Combine filters for precision     | Narrow down large image sets    | `--filter "label=team=backend" --filter "dangling=false"`        |
